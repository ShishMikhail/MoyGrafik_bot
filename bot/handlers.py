import logging
import sys
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from datetime import datetime
from sqlalchemy import text

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..')))

from bot.settings import get_user_settings, update_user_settings
from bot.status_checker import get_attendance, get_attendance_last_10_days
from bot.utils import INPUT_VACATION_START, INPUT_VACATION_END, INPUT_ARRIVAL_NOTIFICATION_TIME, \
    INPUT_DEPARTURE_NOTIFICATION_TIME
from database.db import engine

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.DEBUG,
    handlers=[
        logging.FileHandler('handlers.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
SET_VACATION_START, SET_VACATION_END, ADD_ARRIVAL_NOTIFICATION, ADD_DEPARTURE_NOTIFICATION = range(INPUT_VACATION_START,
                                                                                                   INPUT_DEPARTURE_NOTIFICATION_TIME + 1)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ (–æ–Ω–∏ –±—É–¥—É—Ç –≤–Ω–∏–∑—É —Å–æ–æ–±—â–µ–Ω–∏—è)
    keyboard = [
        [InlineKeyboardButton("üì© –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É", callback_data='toggle_subscription')],
        [InlineKeyboardButton("üèñÔ∏è –ó–∞–¥–∞—Ç—å –¥–∞—Ç—ã –æ—Ç–ø—É—Å–∫–∞", callback_data='set_vacation'),
         InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –¥–∞—Ç—ã –æ—Ç–ø—É—Å–∫–∞", callback_data='clear_vacation')],
        [InlineKeyboardButton("‚è∞ –î–æ–±–∞–≤–∏—Ç—å –≤—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –æ –ø—Ä–∏—Ö–æ–¥–µ", callback_data='add_arrival_notification_time'),
         InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –æ –ø—Ä–∏—Ö–æ–¥–µ",
                              callback_data='remove_arrival_notification_time')],
        [InlineKeyboardButton("‚è∞ –î–æ–±–∞–≤–∏—Ç—å –≤—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –æ–± —É—Ö–æ–¥–µ", callback_data='add_departure_notification_time'),
         InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –æ–± —É—Ö–æ–¥–µ",
                              callback_data='remove_departure_notification_time')],
        [InlineKeyboardButton("üìÖ –ü–æ—Å–µ—â–µ–Ω–∏—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data='attendance_today'),
         InlineKeyboardButton("üìä –ü–æ—Å–µ—â–µ–Ω–∏—è –∑–∞ 10 –¥–Ω–µ–π", callback_data='attendance_10_days')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    with engine.connect() as connection:
        # –ò—â–µ–º employee_id –ø–æ telegram_id
        query = text("SELECT employee_id FROM user_settings WHERE telegram_id = :telegram_id")
        result = connection.execute(query, {"telegram_id": user_id}).mappings().fetchone()

        if not result:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
            message = (
                "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–º —Ä–∞–±–æ—Ç—ã.\n\n"
                "‚ùå –ö–∞–∂–µ—Ç—Å—è, —Ç—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /register, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å! üìù"
            )
            await update.message.reply_text(message, reply_markup=reply_markup)
            return ConversationHandler.END

        employee_id = result['employee_id']

        # –ò—â–µ–º –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ employee_id
        query = text("SELECT first_name, last_name FROM employees WHERE id = :employee_id")
        employee = connection.execute(query, {"employee_id": employee_id}).mappings().fetchone()

        if not employee:
            # –ï—Å–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
            message = (
                "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–º —Ä–∞–±–æ—Ç—ã.\n\n"
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ. –í–æ–∑–º–æ–∂–Ω–æ, —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω.\n"
                "–ü–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å –ø–æ–º–æ—â—å—é /register. üìù"
            )
            await update.message.reply_text(message, reply_markup=reply_markup)
            return ConversationHandler.END

        first_name = employee['first_name']
        last_name = employee['last_name']

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    subscribed, vacation_start, vacation_end, arrival_notification_times, departure_notification_times = get_user_settings(
        user_id)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç —Å —Å–º–∞–π–ª–∏–∫–∞–º–∏
    subscription_status = "–ø–æ–¥–ø–∏—Å–∞–Ω ‚úÖ" if subscribed else "–Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω üö´"
    vacation_text = f"{vacation_start} - {vacation_end}" if vacation_start and vacation_end else "–Ω–µ –∑–∞–¥–∞–Ω üìÖ"
    arrival_notifications_text = ', '.join(arrival_notification_times) if arrival_notification_times else "–Ω–µ –∑–∞–¥–∞–Ω–æ ‚è∞"
    departure_notifications_text = ', '.join(
        departure_notification_times) if departure_notification_times else "–Ω–µ –∑–∞–¥–∞–Ω–æ ‚è∞"

    message = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {first_name} {last_name}! –Ø —Ç–≤–æ–π –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–º —Ä–∞–±–æ—Ç—ã.\n\n"
        "üìã –¢–≤–æ–∏ —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
        f"üì© –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É: {subscription_status}\n"
        f"üèñÔ∏è –î–∞—Ç—ã –æ—Ç–ø—É—Å–∫–∞: {vacation_text}\n"
        f"‚è∞ –í—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –æ –ø—Ä–∏—Ö–æ–¥–µ: {arrival_notifications_text}\n"
        f"‚è∞ –í—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –æ–± —É—Ö–æ–¥–µ: {departure_notifications_text}\n\n"
        "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å: üëá"
    )

    await update.message.reply_text(message, reply_markup=reply_markup)
    return ConversationHandler.END


async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /menu –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ (–æ–Ω–∏ –±—É–¥—É—Ç –≤–Ω–∏–∑—É —Å–æ–æ–±—â–µ–Ω–∏—è)
    keyboard = [
        [InlineKeyboardButton("üì© –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É", callback_data='toggle_subscription')],
        [InlineKeyboardButton("üèñÔ∏è –ó–∞–¥–∞—Ç—å –¥–∞—Ç—ã –æ—Ç–ø—É—Å–∫–∞", callback_data='set_vacation'),
         InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –¥–∞—Ç—ã –æ—Ç–ø—É—Å–∫–∞", callback_data='clear_vacation')],
        [InlineKeyboardButton("‚è∞ –î–æ–±–∞–≤–∏—Ç—å –≤—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –æ –ø—Ä–∏—Ö–æ–¥–µ", callback_data='add_arrival_notification_time'),
         InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –æ –ø—Ä–∏—Ö–æ–¥–µ",
                              callback_data='remove_arrival_notification_time')],
        [InlineKeyboardButton("‚è∞ –î–æ–±–∞–≤–∏—Ç—å –≤—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –æ–± —É—Ö–æ–¥–µ", callback_data='add_departure_notification_time'),
         InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –æ–± —É—Ö–æ–¥–µ",
                              callback_data='remove_departure_notification_time')],
        [InlineKeyboardButton("üìÖ –ü–æ—Å–µ—â–µ–Ω–∏—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data='attendance_today'),
         InlineKeyboardButton("üìä –ü–æ—Å–µ—â–µ–Ω–∏—è –∑–∞ 10 –¥–Ω–µ–π", callback_data='attendance_10_days')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    subscribed, vacation_start, vacation_end, arrival_notification_times, departure_notification_times = get_user_settings(
        user_id)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç —Å —Å–º–∞–π–ª–∏–∫–∞–º–∏
    subscription_status = "–ø–æ–¥–ø–∏—Å–∞–Ω ‚úÖ" if subscribed else "–Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω üö´"
    vacation_text = f"{vacation_start} - {vacation_end}" if vacation_start and vacation_end else "–Ω–µ –∑–∞–¥–∞–Ω üìÖ"
    arrival_notifications_text = ', '.join(arrival_notification_times) if arrival_notification_times else "–Ω–µ –∑–∞–¥–∞–Ω–æ ‚è∞"
    departure_notifications_text = ', '.join(
        departure_notification_times) if departure_notification_times else "–Ω–µ –∑–∞–¥–∞–Ω–æ ‚è∞"

    message = (
        "üìã –¢–≤–æ—ë –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫:\n\n"
        f"üì© –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É: {subscription_status}\n"
        f"üèñÔ∏è –î–∞—Ç—ã –æ—Ç–ø—É—Å–∫–∞: {vacation_text}\n"
        f"‚è∞ –í—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –æ –ø—Ä–∏—Ö–æ–¥–µ: {arrival_notifications_text}\n"
        f"‚è∞ –í—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –æ–± —É—Ö–æ–¥–µ: {departure_notifications_text}\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ: üëá"
    )

    await update.message.reply_text(message, reply_markup=reply_markup)
    return ConversationHandler.END


async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /status –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    subscribed, vacation_start, vacation_end, arrival_notification_times, departure_notification_times = get_user_settings(
        user_id)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç —Å —Å–º–∞–π–ª–∏–∫–∞–º–∏
    subscription_status = "–ø–æ–¥–ø–∏—Å–∞–Ω ‚úÖ" if subscribed else "–Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω üö´"
    vacation_text = f"{vacation_start} - {vacation_end}" if vacation_start and vacation_end else "–Ω–µ –∑–∞–¥–∞–Ω üìÖ"
    arrival_notifications_text = ', '.join(arrival_notification_times) if arrival_notification_times else "–Ω–µ –∑–∞–¥–∞–Ω–æ ‚è∞"
    departure_notifications_text = ', '.join(
        departure_notification_times) if departure_notification_times else "–Ω–µ –∑–∞–¥–∞–Ω–æ ‚è∞"

    message = (
        "üìã –¢–≤–æ–π —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:\n\n"
        f"üì© –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É: {subscription_status}\n"
        f"üèñÔ∏è –î–∞—Ç—ã –æ—Ç–ø—É—Å–∫–∞: {vacation_text}\n"
        f"‚è∞ –í—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –æ –ø—Ä–∏—Ö–æ–¥–µ: {arrival_notifications_text}\n"
        f"‚è∞ –í—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –æ–± —É—Ö–æ–¥–µ: {departure_notifications_text}"
    )

    await update.message.reply_text(message)
    return ConversationHandler.END


async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    callback_data = query.data
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω callback-–∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: callback_data={callback_data}")

    subscribed, vacation_start, vacation_end, arrival_notification_times, departure_notification_times = get_user_settings(
        user_id)

    if callback_data == 'toggle_subscription':
        new_subscribed = not subscribed
        update_user_settings(user_id, subscribed=new_subscribed)
        status = "–ø–æ–¥–ø–∏—Å–∞–Ω ‚úÖ" if new_subscribed else "–æ—Ç–ø–∏—Å–∞–Ω üö´"
        await query.message.reply_text(f"üì© –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É: {status}")

    elif callback_data == 'set_vacation':
        await query.message.reply_text("üìÖ –í–≤–µ–¥–∏ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –æ—Ç–ø—É—Å–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î-–ú–ú-–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 01-01-2025):")
        return SET_VACATION_START

    elif callback_data == 'clear_vacation':
        logger.debug(f"–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å –¥–∞—Ç—ã –æ—Ç–ø—É—Å–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        if not vacation_start and not vacation_end:
            await query.message.reply_text("üèñÔ∏è –£ —Ç–µ–±—è –Ω–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞—Ç –æ—Ç–ø—É—Å–∫–∞! üòï")
            return ConversationHandler.END
        update_user_settings(user_id, vacation_start=None, vacation_end=None)
        logger.debug(f"–î–∞—Ç—ã –æ—Ç–ø—É—Å–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–±—Ä–æ—à–µ–Ω—ã")

        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        subscribed, vacation_start, vacation_end, arrival_notification_times, departure_notification_times = get_user_settings(
            user_id)
        subscription_status = "–ø–æ–¥–ø–∏—Å–∞–Ω ‚úÖ" if subscribed else "–Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω üö´"
        vacation_text = f"{vacation_start} - {vacation_end}" if vacation_start and vacation_end else "–Ω–µ –∑–∞–¥–∞–Ω üìÖ"
        arrival_notifications_text = ', '.join(
            arrival_notification_times) if arrival_notification_times else "–Ω–µ –∑–∞–¥–∞–Ω–æ ‚è∞"
        departure_notifications_text = ', '.join(
            departure_notification_times) if departure_notification_times else "–Ω–µ –∑–∞–¥–∞–Ω–æ ‚è∞"

        message = (
            "üèñÔ∏è –î–∞—Ç—ã –æ—Ç–ø—É—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã! ‚úÖ\n\n"
            "üìã –¢–≤–æ–∏ —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
            f"üì© –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É: {subscription_status}\n"
            f"üèñÔ∏è –î–∞—Ç—ã –æ—Ç–ø—É—Å–∫–∞: {vacation_text}\n"
            f"‚è∞ –í—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –æ –ø—Ä–∏—Ö–æ–¥–µ: {arrival_notifications_text}\n"
            f"‚è∞ –í—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –æ–± —É—Ö–æ–¥–µ: {departure_notifications_text}"
        )
        await query.message.reply_text(message)

    elif callback_data == 'add_arrival_notification_time':
        if len(arrival_notification_times) >= 10:
            await query.message.reply_text(
                "‚è∞ –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –æ –ø—Ä–∏—Ö–æ–¥–µ (10). –£–¥–∞–ª–∏ –æ–¥–Ω–æ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö! üóëÔ∏è")
            return ConversationHandler.END
        await query.message.reply_text("‚è∞ –í–≤–µ–¥–∏ –≤—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ –ø—Ä–∏—Ö–æ–¥–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00):")
        return ADD_ARRIVAL_NOTIFICATION

    elif callback_data == 'add_departure_notification_time':
        if len(departure_notification_times) >= 10:
            await query.message.reply_text(
                "‚è∞ –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –æ–± —É—Ö–æ–¥–µ (10). –£–¥–∞–ª–∏ –æ–¥–Ω–æ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö! üóëÔ∏è")
            return ConversationHandler.END
        await query.message.reply_text("‚è∞ –í–≤–µ–¥–∏ –≤—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ–± —É—Ö–æ–¥–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 18:00):")
        return ADD_DEPARTURE_NOTIFICATION

    elif callback_data == 'remove_arrival_notification_time':
        if not arrival_notification_times:
            await query.message.reply_text("‚è∞ –£ —Ç–µ–±—è –Ω–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –æ –ø—Ä–∏—Ö–æ–¥–µ! üòï")
            return ConversationHandler.END
        keyboard = [[InlineKeyboardButton(f"{time} üóëÔ∏è", callback_data=f"remove_arrival_time_{time}")] for time in
                    arrival_notification_times]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text("‚è∞ –í—ã–±–µ—Ä–∏ –≤—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ –ø—Ä–∏—Ö–æ–¥–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: üëá", reply_markup=reply_markup)

    elif callback_data == 'remove_departure_notification_time':
        if not departure_notification_times:
            await query.message.reply_text("‚è∞ –£ —Ç–µ–±—è –Ω–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –æ–± —É—Ö–æ–¥–µ! üòï")
            return ConversationHandler.END
        keyboard = [[InlineKeyboardButton(f"{time} üóëÔ∏è", callback_data=f"remove_departure_time_{time}")] for time in
                    departure_notification_times]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text("‚è∞ –í—ã–±–µ—Ä–∏ –≤—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ–± —É—Ö–æ–¥–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: üëá", reply_markup=reply_markup)

    elif callback_data.startswith('remove_arrival_time_'):
        time_to_remove = callback_data[len('remove_arrival_time_'):]
        if time_to_remove in arrival_notification_times:
            arrival_notification_times.remove(time_to_remove)
            update_user_settings(user_id, arrival_notification_times=arrival_notification_times)
            await query.message.reply_text(f"‚è∞ –í—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ –ø—Ä–∏—Ö–æ–¥–µ {time_to_remove} —É–¥–∞–ª–µ–Ω–æ! ‚úÖ")
        else:
            await query.message.reply_text("‚è∞ –≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ —É–¥–∞–ª–µ–Ω–æ! üòï")

    elif callback_data.startswith('remove_departure_time_'):
        time_to_remove = callback_data[len('remove_departure_time_'):]
        if time_to_remove in departure_notification_times:
            departure_notification_times.remove(time_to_remove)
            update_user_settings(user_id, departure_notification_times=departure_notification_times)
            await query.message.reply_text(f"‚è∞ –í—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ–± —É—Ö–æ–¥–µ {time_to_remove} —É–¥–∞–ª–µ–Ω–æ! ‚úÖ")
        else:
            await query.message.reply_text("‚è∞ –≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ —É–¥–∞–ª–µ–Ω–æ! üòï")

    elif callback_data == 'attendance_today':
        today = datetime.now().strftime('%Y-%m-%d')
        status = get_attendance(user_id, today)
        await query.message.reply_text(f"üìÖ –ü–æ—Å–µ—â–µ–Ω–∏—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è ({today}):\n{status}")

    elif callback_data == 'attendance_10_days':
        today = datetime.now().strftime('%Y-%m-%d')
        records = get_attendance_last_10_days(user_id, today)
        if not records:
            await query.message.reply_text("üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –¥–Ω–µ–π! üòï")
            return
        response = "üìä –ü–æ—Å–µ—â–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –¥–Ω–µ–π:\n"
        for date, status in records:
            response += f"{date}: {status}\n"
        await query.message.reply_text(response)

    return ConversationHandler.END


async def set_vacation_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text
    try:
        vacation_start = datetime.strptime(text, '%d-%m-%Y').strftime('%Y-%m-%d')
        context.user_data['vacation_start'] = vacation_start
        await update.message.reply_text("üìÖ –í–≤–µ–¥–∏ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ—Ç–ø—É—Å–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î-–ú–ú-–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 01-01-2025):")
        return SET_VACATION_END
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ (–î–î-–ú–ú-–ì–ì–ì–ì):")
        return SET_VACATION_START


async def set_vacation_end(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text
    try:
        vacation_end = datetime.strptime(text, '%d-%m-%Y').strftime('%Y-%m-%d')
        vacation_start = context.user_data.get('vacation_start')
        if not vacation_start:
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ. üòï")
            return ConversationHandler.END
        update_user_settings(user_id, vacation_start=vacation_start, vacation_end=vacation_end)
        await update.message.reply_text(f"üèñÔ∏è –î–∞—Ç—ã –æ—Ç–ø—É—Å–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: {vacation_start} - {vacation_end} ‚úÖ")
        return ConversationHandler.END
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ (–î–î-–ú–ú-–ì–ì–ì–ì):")
        return SET_VACATION_END


async def add_arrival_notification_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text
    try:
        datetime.strptime(text, '%H:%M')  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞
        subscribed, vacation_start, vacation_end, arrival_notification_times, departure_notification_times = get_user_settings(
            user_id)
        if text not in arrival_notification_times:
            arrival_notification_times.append(text)
            update_user_settings(user_id, arrival_notification_times=arrival_notification_times)
            await update.message.reply_text(f"‚è∞ –í—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ –ø—Ä–∏—Ö–æ–¥–µ {text} –¥–æ–±–∞–≤–ª–µ–Ω–æ! ‚úÖ")
        else:
            await update.message.reply_text(f"‚è∞ –í—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ –ø—Ä–∏—Ö–æ–¥–µ {text} —É–∂–µ –µ—Å—Ç—å! üòï")
        return ConversationHandler.END
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ (–ß–ß:–ú–ú):")
        return ADD_ARRIVAL_NOTIFICATION


async def add_departure_notification_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text
    try:
        datetime.strptime(text, '%H:%M')  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞
        subscribed, vacation_start, vacation_end, arrival_notification_times, departure_notification_times = get_user_settings(
            user_id)
        if text not in departure_notification_times:
            departure_notification_times.append(text)
            update_user_settings(user_id, departure_notification_times=departure_notification_times)
            await update.message.reply_text(f"‚è∞ –í—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ–± —É—Ö–æ–¥–µ {text} –¥–æ–±–∞–≤–ª–µ–Ω–æ! ‚úÖ")
        else:
            await update.message.reply_text(f"‚è∞ –í—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ–± —É—Ö–æ–¥–µ {text} —É–∂–µ –µ—Å—Ç—å! üòï")
        return ConversationHandler.END
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ (–ß–ß:–ú–ú):")
        return ADD_DEPARTURE_NOTIFICATION