import json
import logging
import sys
import os
import re
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from sqlalchemy import text
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..')))

from database.db import engine
from bot.utils import INPUT_VACATION_START, INPUT_VACATION_END, INPUT_ARRIVAL_NOTIFICATION_TIME, INPUT_DEPARTURE_NOTIFICATION_TIME

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª—å PyCharm
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.DEBUG,
    handlers=[
        logging.StreamHandler(sys.stdout)  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å
    ]
)
logger = logging.getLogger(__name__)

def get_user_settings(telegram_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    try:
        with engine.connect() as conn:
            query = text("""
                SELECT subscribed, vacation_start, vacation_end, arrival_notification_times, departure_notification_times
                FROM user_settings
                WHERE telegram_id = :telegram_id
            """)
            result = conn.execute(query, {"telegram_id": telegram_id}).mappings().fetchone()
            logger.debug(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {result}")

            if not result:
                logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                return False, None, None, [], []

            subscribed = result['subscribed']
            vacation_start = result['vacation_start']
            vacation_end = result['vacation_end']

            try:
                arrival_notification_times = json.loads(result['arrival_notification_times'] or '[]')
                if not isinstance(arrival_notification_times, list):
                    logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç arrival_notification_times –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {arrival_notification_times}")
                    arrival_notification_times = []
            except (json.JSONDecodeError, TypeError) as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ arrival_notification_times –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}")
                arrival_notification_times = []

            try:
                departure_notification_times = json.loads(result['departure_notification_times'] or '[]')
                if not isinstance(departure_notification_times, list):
                    logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç departure_notification_times –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {departure_notification_times}")
                    departure_notification_times = []
            except (json.JSONDecodeError, TypeError) as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ departure_notification_times –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}")
                departure_notification_times = []

            return subscribed, vacation_start, vacation_end, arrival_notification_times, departure_notification_times

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ get_user_settings –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {str(e)}")
        raise

def update_user_settings(telegram_id, subscribed=None, vacation_start=..., vacation_end=..., arrival_notification_times=None, departure_notification_times=None):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    try:
        with engine.connect() as conn:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            query = text("SELECT 1 FROM user_settings WHERE telegram_id = :telegram_id")
            result = conn.execute(query, {"telegram_id": telegram_id}).fetchone()
            if not result:
                logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
                return False

            updates = {}
            params = {"telegram_id": telegram_id}

            # –§–ª–∞–≥, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å, –æ–±–Ω–æ–≤–ª—è–µ–º –ª–∏ –º—ã vacation_start –∏–ª–∏ vacation_end
            updating_vacation = False

            if subscribed is not None:
                updates["subscribed"] = "subscribed = :subscribed"
                params["subscribed"] = subscribed

            # –ò–∑–º–µ–Ω–∏–ª –ª–æ–≥–∏–∫—É: —Ç–µ–ø–µ—Ä—å vacation_start –∏ vacation_end –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –¥–∞–∂–µ –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω None
            if vacation_start is not ...:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä (–∏—Å–ø–æ–ª—å–∑—É–µ–º ... –∫–∞–∫ sentinel)
                updates["vacation_start"] = "vacation_start = :vacation_start"
                params["vacation_start"] = vacation_start
                updating_vacation = True

            if vacation_end is not ...:
                updates["vacation_end"] = "vacation_end = :vacation_end"
                params["vacation_end"] = vacation_end
                updating_vacation = True

            if arrival_notification_times is not None:
                updates["arrival_notification_times"] = "arrival_notification_times = :arrival_notification_times"
                params["arrival_notification_times"] = json.dumps(arrival_notification_times)

            if departure_notification_times is not None:
                updates["departure_notification_times"] = "departure_notification_times = :departure_notification_times"
                params["departure_notification_times"] = json.dumps(departure_notification_times)

            if not updates:
                logger.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
                return False

            update_clause = ", ".join(updates.values())
            query = text(f"""
                UPDATE user_settings
                SET {update_clause}
                WHERE telegram_id = :telegram_id
            """)
            logger.debug(f"–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {query}, –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {params}")
            conn.execute(query, params)
            conn.commit()  # –Ø–≤–Ω–æ —Ñ–∏–∫—Å–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            logger.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {params}")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            query = text("""
                SELECT subscribed, vacation_start, vacation_end, arrival_notification_times, departure_notification_times
                FROM user_settings
                WHERE telegram_id = :telegram_id
            """)
            result = conn.execute(query, {"telegram_id": telegram_id}).mappings().fetchone()
            logger.debug(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {result}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–±—Ä–æ—Å vacation_start –∏ vacation_end —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º—ã –∏—Ö –æ–±–Ω–æ–≤–ª—è–ª–∏
            if updating_vacation and vacation_start is None and vacation_end is None:
                if result['vacation_start'] is not None or result['vacation_end'] is not None:
                    logger.error(f"–û—à–∏–±–∫–∞: vacation_start –∏–ª–∏ vacation_end –Ω–µ —Å–±—Ä–æ—à–µ–Ω—ã –≤ NULL –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {result}")
                    return False

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ arrival_notification_times –æ–±–Ω–æ–≤–ª–µ–Ω—ã
            if arrival_notification_times is not None:
                updated_arrival_times = json.loads(result['arrival_notification_times'] or '[]')
                if updated_arrival_times != arrival_notification_times:
                    logger.error(f"–û—à–∏–±–∫–∞: arrival_notification_times –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}. –û–∂–∏–¥–∞–ª–æ—Å—å: {arrival_notification_times}, –ø–æ–ª—É—á–µ–Ω–æ: {updated_arrival_times}")
                    return False

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ departure_notification_times –æ–±–Ω–æ–≤–ª–µ–Ω—ã
            if departure_notification_times is not None:
                updated_departure_times = json.loads(result['departure_notification_times'] or '[]')
                if updated_departure_times != departure_notification_times:
                    logger.error(f"–û—à–∏–±–∫–∞: departure_notification_times –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}. –û–∂–∏–¥–∞–ª–æ—Å—å: {departure_notification_times}, –ø–æ–ª—É—á–µ–Ω–æ: {updated_departure_times}")
                    return False

            return True

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ update_user_settings –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {str(e)}")
        return False

def create_main_menu(subscribed, vacation_start, vacation_end, arrival_notification_times, departure_notification_times):
    """–°–æ–∑–¥–∞—ë—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    subscription_status = "–ø–æ–¥–ø–∏—Å–∞–Ω ‚úÖ" if subscribed else "–Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω üö´"
    vacation_text = f"{vacation_start} - {vacation_end}" if vacation_start and vacation_end else "–Ω–µ –∑–∞–¥–∞–Ω–æ üìÖ"
    arrival_notifications_text = ', '.join(arrival_notification_times) if arrival_notification_times else "–Ω–µ –∑–∞–¥–∞–Ω–æ ‚è∞"
    departure_notifications_text = ', '.join(departure_notification_times) if departure_notification_times else "–Ω–µ –∑–∞–¥–∞–Ω–æ üö™"

    message = (
        f"üìã –¢–≤–æ–∏ —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
        f"üì© –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É: {subscription_status}\n"
        f"üèñÔ∏è –ü–µ—Ä–∏–æ–¥ –æ—Ç–ø—É—Å–∫–∞: {vacation_text}\n"
        f"‚è∞ –í—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –æ –ø—Ä–∏—Ö–æ–¥–µ: {arrival_notifications_text}\n"
        f"üö™ –í—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –æ–± —É—Ö–æ–¥–µ: {departure_notifications_text}\n\n"
        "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å: üëá"
    )
    keyboard = [
        [InlineKeyboardButton("üì© –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É", callback_data='toggle_subscription')],
        [InlineKeyboardButton("üèñÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–∏–æ–¥ –æ—Ç–ø—É—Å–∫–∞", callback_data='set_vacation'),
         InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–µ—Ä–∏–æ–¥ –æ—Ç–ø—É—Å–∫–∞", callback_data='remove_vacation')],
        [InlineKeyboardButton("‚è∞ –î–æ–±–∞–≤–∏—Ç—å –≤—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –æ –ø—Ä–∏—Ö–æ–¥–µ", callback_data='add_arrival_notification_time'),
         InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –æ –ø—Ä–∏—Ö–æ–¥–µ", callback_data='remove_arrival_notification_time')],
        [InlineKeyboardButton("üö™ –î–æ–±–∞–≤–∏—Ç—å –≤—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –æ–± —É—Ö–æ–¥–µ", callback_data='add_departure_notification_time'),
         InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –æ–± —É—Ö–æ–¥–µ", callback_data='remove_departure_notification_time')],
        [InlineKeyboardButton("üìÖ –ü–æ—Å–µ—â–µ–Ω–∏—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data='attendance_today'),
         InlineKeyboardButton("üìä –ü–æ—Å–µ—â–µ–Ω–∏—è –∑–∞ 10 –¥–Ω–µ–π", callback_data='attendance_10_days')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    return message, reply_markup

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    callback_data = query.data
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω callback-–∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: callback_data={callback_data}")

    try:
        subscribed, vacation_start, vacation_end, arrival_notification_times, departure_notification_times = get_user_settings(user_id)

        if callback_data == 'toggle_subscription':
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É'. –î–µ–π—Å—Ç–≤–∏–µ: –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏.")
            new_subscribed = not subscribed
            success = update_user_settings(user_id, subscribed=new_subscribed)
            if success:
                status = "–ø–æ–¥–ø–∏—Å–∞–Ω ‚úÖ" if new_subscribed else "–æ—Ç–ø–∏—Å–∞–Ω üö´"
                await query.message.reply_text(f"üì© –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É: {status}")
                # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
                subscribed, vacation_start, vacation_end, arrival_notification_times, departure_notification_times = get_user_settings(user_id)
                message, reply_markup = create_main_menu(subscribed, vacation_start, vacation_end, arrival_notification_times, departure_notification_times)
                await query.message.reply_text(message, reply_markup=reply_markup)
            else:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")

        elif callback_data == 'set_vacation':
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–∏–æ–¥ –æ—Ç–ø—É—Å–∫–∞'. –î–µ–π—Å—Ç–≤–∏–µ: –∑–∞–ø—Ä–æ—Å –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –æ—Ç–ø—É—Å–∫–∞.")
            await query.message.reply_text("üìÖ –í–≤–µ–¥–∏ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –æ—Ç–ø—É—Å–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î-–ú–ú-–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 01-01-2025):")
            return INPUT_VACATION_START

        elif callback_data == 'remove_vacation':
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É '–£–¥–∞–ª–∏—Ç—å –ø–µ—Ä–∏–æ–¥ –æ—Ç–ø—É—Å–∫–∞'. –î–µ–π—Å—Ç–≤–∏–µ: —É–¥–∞–ª–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞ –æ—Ç–ø—É—Å–∫–∞.")
            if not vacation_start and not vacation_end:
                logger.warning(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –æ—Ç–ø—É—Å–∫–∞.")
                await query.message.reply_text("üèñÔ∏è –£ —Ç–µ–±—è –Ω–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –æ—Ç–ø—É—Å–∫–∞! üòï")
                return ConversationHandler.END
            success = update_user_settings(user_id, vacation_start=None, vacation_end=None)
            if success:
                await query.message.reply_text("üèñÔ∏è –ü–µ—Ä–∏–æ–¥ –æ—Ç–ø—É—Å–∫–∞ —É–¥–∞–ª—ë–Ω! ‚úÖ")
                # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
                subscribed, vacation_start, vacation_end, arrival_notification_times, departure_notification_times = get_user_settings(user_id)
                message, reply_markup = create_main_menu(subscribed, vacation_start, vacation_end, arrival_notification_times, departure_notification_times)
                await query.message.reply_text(message, reply_markup=reply_markup)
            else:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–µ—Ä–∏–æ–¥ –æ—Ç–ø—É—Å–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–µ—Ä–∏–æ–¥–∞ –æ—Ç–ø—É—Å–∫–∞. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")

        elif callback_data == 'add_arrival_notification_time':
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É '–î–æ–±–∞–≤–∏—Ç—å –≤—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –æ –ø—Ä–∏—Ö–æ–¥–µ'. –î–µ–π—Å—Ç–≤–∏–µ: –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –∏ –∑–∞–ø—Ä–æ—Å –≤—Ä–µ–º–µ–Ω–∏.")
            if len(arrival_notification_times) >= 10:
                logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ—Å—Ç–∏–≥ –ª–∏–º–∏—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –æ –ø—Ä–∏—Ö–æ–¥–µ (10).")
                await query.message.reply_text(
                    "‚è∞ –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –æ –ø—Ä–∏—Ö–æ–¥–µ (10). –£–¥–∞–ª–∏ –æ–¥–Ω–æ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö! üóëÔ∏è")
                return ConversationHandler.END
            await query.message.reply_text("‚è∞ –í–≤–µ–¥–∏ –≤—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ –ø—Ä–∏—Ö–æ–¥–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú –∏–ª–∏ –ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00 –∏–ª–∏ 9:00):")
            return INPUT_ARRIVAL_NOTIFICATION_TIME

        elif callback_data == 'remove_arrival_notification_time':
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É '–£–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –æ –ø—Ä–∏—Ö–æ–¥–µ'. –î–µ–π—Å—Ç–≤–∏–µ: –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            if not arrival_notification_times:
                logger.warning(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –æ –ø—Ä–∏—Ö–æ–¥–µ.")
                await query.message.reply_text("‚è∞ –£ —Ç–µ–±—è –Ω–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –æ –ø—Ä–∏—Ö–æ–¥–µ! üòï")
                return ConversationHandler.END
            keyboard = [[InlineKeyboardButton(f"{time} üóëÔ∏è", callback_data=f"remove_arrival_time_{time}")] for time in arrival_notification_times]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.message.reply_text("‚è∞ –í—ã–±–µ—Ä–∏ –≤—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ –ø—Ä–∏—Ö–æ–¥–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: üëá", reply_markup=reply_markup)

        elif callback_data.startswith('remove_arrival_time_'):
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ –ø—Ä–∏—Ö–æ–¥–µ: {callback_data}. –î–µ–π—Å—Ç–≤–∏–µ: —É–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏.")
            time_to_remove = callback_data[len('remove_arrival_time_'):]
            if time_to_remove in arrival_notification_times:
                arrival_notification_times.remove(time_to_remove)
                success = update_user_settings(user_id, arrival_notification_times=arrival_notification_times)
                if success:
                    await query.message.reply_text(f"‚è∞ –í—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ –ø—Ä–∏—Ö–æ–¥–µ {time_to_remove} —É–¥–∞–ª–µ–Ω–æ! ‚úÖ")
                    # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
                    subscribed, vacation_start, vacation_end, arrival_notification_times, departure_notification_times = get_user_settings(user_id)
                    message, reply_markup = create_main_menu(subscribed, vacation_start, vacation_end, arrival_notification_times, departure_notification_times)
                    await query.message.reply_text(message, reply_markup=reply_markup)
                else:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ –ø—Ä–∏—Ö–æ–¥–µ {time_to_remove} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
            else:
                await query.message.reply_text("‚è∞ –≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ —É–¥–∞–ª–µ–Ω–æ! üòï")

        elif callback_data == 'add_departure_notification_time':
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É '–î–æ–±–∞–≤–∏—Ç—å –≤—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –æ–± —É—Ö–æ–¥–µ'. –î–µ–π—Å—Ç–≤–∏–µ: –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –∏ –∑–∞–ø—Ä–æ—Å –≤—Ä–µ–º–µ–Ω–∏.")
            if len(departure_notification_times) >= 10:
                logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ—Å—Ç–∏–≥ –ª–∏–º–∏—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –æ–± —É—Ö–æ–¥–µ (10).")
                await query.message.reply_text(
                    "üö™ –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –æ–± —É—Ö–æ–¥–µ (10). –£–¥–∞–ª–∏ –æ–¥–Ω–æ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö! üóëÔ∏è")
                return ConversationHandler.END
            await query.message.reply_text("üö™ –í–≤–µ–¥–∏ –≤—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ–± —É—Ö–æ–¥–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú –∏–ª–∏ –ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 17:00 –∏–ª–∏ 9:00):")
            return INPUT_DEPARTURE_NOTIFICATION_TIME

        elif callback_data == 'remove_departure_notification_time':
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É '–£–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –æ–± —É—Ö–æ–¥–µ'. –î–µ–π—Å—Ç–≤–∏–µ: –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            if not departure_notification_times:
                logger.warning(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –æ–± —É—Ö–æ–¥–µ.")
                await query.message.reply_text("üö™ –£ —Ç–µ–±—è –Ω–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –æ–± —É—Ö–æ–¥–µ! üòï")
                return ConversationHandler.END
            keyboard = [[InlineKeyboardButton(f"{time} üóëÔ∏è", callback_data=f"remove_departure_time_{time}")] for time in departure_notification_times]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.message.reply_text("üö™ –í—ã–±–µ—Ä–∏ –≤—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ–± —É—Ö–æ–¥–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: üëá", reply_markup=reply_markup)

        elif callback_data.startswith('remove_departure_time_'):
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ–± —É—Ö–æ–¥–µ: {callback_data}. –î–µ–π—Å—Ç–≤–∏–µ: —É–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏.")
            time_to_remove = callback_data[len('remove_departure_time_'):]
            if time_to_remove in departure_notification_times:
                departure_notification_times.remove(time_to_remove)
                success = update_user_settings(user_id, departure_notification_times=departure_notification_times)
                if success:
                    await query.message.reply_text(f"üö™ –í—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ–± —É—Ö–æ–¥–µ {time_to_remove} —É–¥–∞–ª–µ–Ω–æ! ‚úÖ")
                    # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
                    subscribed, vacation_start, vacation_end, arrival_notification_times, departure_notification_times = get_user_settings(user_id)
                    message, reply_markup = create_main_menu(subscribed, vacation_start, vacation_end, arrival_notification_times, departure_notification_times)
                    await query.message.reply_text(message, reply_markup=reply_markup)
                else:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ–± —É—Ö–æ–¥–µ {time_to_remove} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
            else:
                await query.message.reply_text("üö™ –≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ —É–¥–∞–ª–µ–Ω–æ! üòï")

        return ConversationHandler.END

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ button_handler –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}")
        await query.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –∏–ª–∏ —Å–≤—è–∂–∏—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        return ConversationHandler.END

async def set_vacation_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text
    logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤—ë–ª –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –æ—Ç–ø—É—Å–∫–∞: {text}")

    try:
        vacation_start = datetime.strptime(text, '%d-%m-%Y').strftime('%Y-%m-%d')
        logger.info(f"–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –æ—Ç–ø—É—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–∞: {vacation_start}")
        today = datetime.now().date()
        start_date = datetime.strptime(vacation_start, '%Y-%m-%d').date()
        if start_date < today:
            logger.warning(f"–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –æ—Ç–ø—É—Å–∫–∞ –≤ –ø—Ä–æ—à–ª–æ–º: {vacation_start}, —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞: {today}")
            await update.message.reply_text("‚ùå –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –æ—Ç–ø—É—Å–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ (–î–î-–ú–ú-–ì–ì–ì–ì, –Ω–∞–ø—Ä–∏–º–µ—Ä, 01-01-2025):")
            return INPUT_VACATION_START
        context.user_data['vacation_start'] = vacation_start
        await update.message.reply_text("üìÖ –í–≤–µ–¥–∏ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ—Ç–ø—É—Å–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î-–ú–ú-–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 01-01-2025):")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–µ—Ä–µ—à—ë–ª –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ INPUT_VACATION_END")
        return INPUT_VACATION_END
    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –æ—Ç–ø—É—Å–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}")
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ (–î–î-–ú–ú-–ì–ì–ì–ì, –Ω–∞–ø—Ä–∏–º–µ—Ä, 01-01-2025):")
        return INPUT_VACATION_START
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ set_vacation_start –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –∏–ª–∏ —Å–≤—è–∂–∏—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        return ConversationHandler.END

async def set_vacation_end(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text
    logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤—ë–ª –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ—Ç–ø—É—Å–∫–∞: {text}")

    try:
        vacation_end = datetime.strptime(text, '%d-%m-%Y').strftime('%Y-%m-%d')
        logger.info(f"–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ—Ç–ø—É—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–∞: {vacation_end}")
        vacation_start = context.user_data.get('vacation_start')
        if not vacation_start:
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–∏–æ–¥ –æ—Ç–ø—É—Å–∫–∞'. üòï")
            return ConversationHandler.END

        start_date = datetime.strptime(vacation_start, '%Y-%m-%d').date()
        end_date = datetime.strptime(vacation_end, '%Y-%m-%d').date()
        if end_date <= start_date:
            await update.message.reply_text("‚ùå –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ—Ç–ø—É—Å–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ (–î–î-–ú–ú-–ì–ì–ì–ì):")
            return INPUT_VACATION_END

        success = update_user_settings(user_id, vacation_start=vacation_start, vacation_end=vacation_end)
        if success:
            await update.message.reply_text(f"üèñÔ∏è –ü–µ—Ä–∏–æ–¥ –æ—Ç–ø—É—Å–∫–∞ {vacation_start} - {vacation_end} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! ‚úÖ")
            subscribed, vacation_start, vacation_end, arrival_notification_times, departure_notification_times = get_user_settings(user_id)
            message, reply_markup = create_main_menu(subscribed, vacation_start, vacation_end, arrival_notification_times, departure_notification_times)
            await update.message.reply_text(message, reply_markup=reply_markup)
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–µ—Ä–∏–æ–¥–∞ –æ—Ç–ø—É—Å–∫–∞. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        return ConversationHandler.END
    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ—Ç–ø—É—Å–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}")
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ (–î–î-–ú–ú-–ì–ì–ì–ì, –Ω–∞–ø—Ä–∏–º–µ—Ä, 01-01-2025):")
        return INPUT_VACATION_END
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ set_vacation_end –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –∏–ª–∏ —Å–≤—è–∂–∏—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        return ConversationHandler.END

async def add_arrival_notification_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip()
    logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤—ë–ª –≤—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ –ø—Ä–∏—Ö–æ–¥–µ: {text}")

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
        time_pattern = r'^(?:[0-1]?[0-9]|2[0-3]):[0-5][0-9]$|^(?:[0-9]|1[0-2]):[0-5][0-9]$'
        if not re.match(time_pattern, text):
            logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ –ø—Ä–∏—Ö–æ–¥–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {text}")
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ (–ß–ß:–ú–ú –∏–ª–∏ –ß:–ú–ú, –Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00 –∏–ª–∏ 9:00):")
            return INPUT_ARRIVAL_NOTIFICATION_TIME

        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú
        parts = text.split(':')
        hours = int(parts[0])
        minutes = int(parts[1])
        if hours < 0 or hours > 23 or minutes < 0 or minutes > 59:
            raise ValueError("–ß–∞—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 0 –¥–æ 23, –º–∏–Ω—É—Ç—ã –æ—Ç 00 –¥–æ 59")
        time_str = f"{hours:02d}:{minutes:02d}"
        logger.info(f"–í—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ –ø—Ä–∏—Ö–æ–¥–µ —É—Å–ø–µ—à–Ω–æ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–æ: {time_str}")

        subscribed, vacation_start, vacation_end, arrival_notification_times, departure_notification_times = get_user_settings(user_id)

        if time_str in arrival_notification_times:
            await update.message.reply_text(f"‚è∞ –í—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ –ø—Ä–∏—Ö–æ–¥–µ {time_str} —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ! üòï")
            return ConversationHandler.END

        arrival_notification_times.append(time_str)
        success = update_user_settings(user_id, arrival_notification_times=arrival_notification_times)
        if success:
            await update.message.reply_text(f"‚è∞ –í—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ –ø—Ä–∏—Ö–æ–¥–µ {time_str} –¥–æ–±–∞–≤–ª–µ–Ω–æ! ‚úÖ")
            subscribed, vacation_start, vacation_end, arrival_notification_times, departure_notification_times = get_user_settings(user_id)
            message, reply_markup = create_main_menu(subscribed, vacation_start, vacation_end, arrival_notification_times, departure_notification_times)
            await update.message.reply_text(message, reply_markup=reply_markup)
        else:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ –ø—Ä–∏—Ö–æ–¥–µ {time_str} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        return ConversationHandler.END
    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ –ø—Ä–∏—Ö–æ–¥–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}")
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ (–ß–ß:–ú–ú –∏–ª–∏ –ß:–ú–ú, –Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00 –∏–ª–∏ 9:00):")
        return INPUT_ARRIVAL_NOTIFICATION_TIME
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ add_arrival_notification_time –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –∏–ª–∏ —Å–≤—è–∂–∏—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        return ConversationHandler.END

async def add_departure_notification_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip()
    logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤—ë–ª –≤—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ–± —É—Ö–æ–¥–µ: {text}")

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
        time_pattern = r'^(?:[0-1]?[0-9]|2[0-3]):[0-5][0-9]$|^(?:[0-9]|1[0-2]):[0-5][0-9]$'
        if not re.match(time_pattern, text):
            logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ–± —É—Ö–æ–¥–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {text}")
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ (–ß–ß:–ú–ú –∏–ª–∏ –ß:–ú–ú, –Ω–∞–ø—Ä–∏–º–µ—Ä, 17:00 –∏–ª–∏ 9:00):")
            return INPUT_DEPARTURE_NOTIFICATION_TIME

        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú
        parts = text.split(':')
        hours = int(parts[0])
        minutes = int(parts[1])
        if hours < 0 or hours > 23 or minutes < 0 or minutes > 59:
            raise ValueError("–ß–∞—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 0 –¥–æ 23, –º–∏–Ω—É—Ç—ã –æ—Ç 00 –¥–æ 59")
        time_str = f"{hours:02d}:{minutes:02d}"
        logger.info(f"–í—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ–± —É—Ö–æ–¥–µ —É—Å–ø–µ—à–Ω–æ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–æ: {time_str}")

        subscribed, vacation_start, vacation_end, arrival_notification_times, departure_notification_times = get_user_settings(user_id)

        if time_str in departure_notification_times:
            await update.message.reply_text(f"üö™ –í—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ–± —É—Ö–æ–¥–µ {time_str} —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ! üòï")
            return ConversationHandler.END

        departure_notification_times.append(time_str)
        success = update_user_settings(user_id, departure_notification_times=departure_notification_times)
        if success:
            await update.message.reply_text(f"üö™ –í—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ–± —É—Ö–æ–¥–µ {time_str} –¥–æ–±–∞–≤–ª–µ–Ω–æ! ‚úÖ")
            subscribed, vacation_start, vacation_end, arrival_notification_times, departure_notification_times = get_user_settings(user_id)
            message, reply_markup = create_main_menu(subscribed, vacation_start, vacation_end, arrival_notification_times, departure_notification_times)
            await update.message.reply_text(message, reply_markup=reply_markup)
        else:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ–± —É—Ö–æ–¥–µ {time_str} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        return ConversationHandler.END
    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ–± —É—Ö–æ–¥–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}")
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ (–ß–ß:–ú–ú –∏–ª–∏ –ß:–ú–ú, –Ω–∞–ø—Ä–∏–º–µ—Ä, 17:00 –∏–ª–∏ 9:00):")
        return INPUT_DEPARTURE_NOTIFICATION_TIME
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ add_departure_notification_time –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –∏–ª–∏ —Å–≤—è–∂–∏—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        return ConversationHandler.END